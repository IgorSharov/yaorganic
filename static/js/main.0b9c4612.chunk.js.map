{"version":3,"sources":["components/Header/Header.tsx","components/Pusher/RoleButton/RoleButton.tsx","components/Pusher/Pusher.tsx","components/Home/Home.tsx","components/Form/Form.tsx","components/CalorieCalculator/CalorieCalculator.tsx","routes/routes.ts","helpers/RouteWithSubRoutes.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Header","sidebarToggleShow","Segment","vertical","className","as","textAlign","icon","Icon","name","Subheader","Container","text","Button","animated","onClick","Content","visible","hidden","RoleButton","userRole","setUserRole","Fragment","Group","basic","active","Pusher","sidebarVisible","sidebarToggleHide","children","Sidebar","Pushable","Menu","animation","onHide","width","size","Item","Image","src","centered","circular","Divider","menuItems","map","element","i","key","Link","to","link","Label","Flag","dimmed","Home","Form","initialValues","country","description","validate","values","errors","onSubmit","setSubmitting","resetForm","axios","post","process","REACT_APP_API_URL","then","response","console","log","catch","error","props","dirty","handleBlur","handleChange","handleSubmit","isSubmitting","isValid","touched","hasError","Object","keys","length","widths","Input","fluid","value","label","placeholder","onBlur","onChange","content","type","loading","disabled","JSON","stringify","initialResultsValue","id","title","amount","protein","fat","carbohydrate","kcal","recalculateWithAmount","Math","round","Number","EPSILON","exact","path","component","useState","setLoading","selected","setSelected","results","setResults","productList","setProductList","Table","celled","structured","Row","HeaderCell","rowSpan","colSpan","Body","product","positive","attention","Cell","e","data","input","parseFloat","el","handleProductAmountChange","filter","Footer","Search","onSearchChange","calorieDB","toUpperCase","startsWith","trim","onResultSelect","result","floated","labelPosition","primary","find","setTimeout","color","forEach","Statistic","Value","RouteWithSubRoutes","Component","routes","render","App","state","setState","role","basename","this","route","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0b9c4612.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Header.scss\";\nimport {\n  Segment,\n  Container,\n  Icon,\n  Header as HUi,\n  Button\n} from \"semantic-ui-react\";\n\ninterface Props {\n  sidebarToggleShow(): void;\n}\n\nconst Header: React.FC<Props> = ({ sidebarToggleShow }) => (\n  <Segment vertical className=\"header-content\">\n    <HUi as=\"h1\" textAlign=\"center\" icon>\n      <Icon name=\"leaf\" />\n      <span className=\"ya-prefix\">ya</span>Organic\n      <HUi.Subheader>Единый портал продуктов здорового питания</HUi.Subheader>\n    </HUi>\n    <Container text>\n      <Button animated=\"vertical\" onClick={sidebarToggleShow}>\n        <Button.Content visible>\n          <Icon name=\"list\" />\n        </Button.Content>\n        <Button.Content hidden>\n          <Icon name=\"arrow left\" />\n        </Button.Content>\n      </Button>\n    </Container>\n  </Segment>\n);\n\nexport default Header;\n","import React from \"react\";\n\nimport { Button } from \"semantic-ui-react\";\n\nimport { userRoles } from \"App\";\n\ninterface Props {\n  userRole: userRoles;\n  setUserRole(role: string): void;\n}\n\nconst RoleButton: React.FC<Props> = ({ userRole, setUserRole }) => {\n  return (\n    <React.Fragment>\n      <Button.Group basic>\n        <Button\n          active={userRole === \"admin\"}\n          onClick={() => {\n            setUserRole(\"admin\");\n          }}\n        >\n          Admin\n        </Button>\n        <Button\n          active={userRole === \"shop\"}\n          onClick={() => {\n            setUserRole(\"shop\");\n          }}\n        >\n          Shop\n        </Button>\n        <Button\n          active={userRole === \"user\"}\n          onClick={() => {\n            setUserRole(\"user\");\n          }}\n        >\n          User\n        </Button>\n        <Button\n          active={userRole === \"none\"}\n          onClick={() => {\n            setUserRole(\"none\");\n          }}\n        >\n          none\n        </Button>\n      </Button.Group>\n    </React.Fragment>\n  );\n};\n\nexport default RoleButton;\n","import React, { ReactNode } from \"react\";\nimport \"./Pusher.scss\";\n\nimport {\n  Button,\n  Divider,\n  Flag,\n  Icon,\n  Image,\n  Label,\n  Menu,\n  Segment,\n  Sidebar\n} from \"semantic-ui-react\";\nimport { Link } from \"react-router-dom\";\n\nimport RoleButton from \"./RoleButton\";\nimport { userRoles } from \"App\";\nimport menuItems from \"./menu_items.json\";\n\ninterface Props {\n  sidebarVisible: boolean;\n  sidebarToggleHide(): void;\n  children: ReactNode;\n  userRole: userRoles;\n  setUserRole(role: string): void;\n}\n\nconst Pusher: React.FC<Props> = ({\n  sidebarVisible,\n  sidebarToggleHide,\n  children,\n  userRole,\n  setUserRole\n}) => (\n  <Sidebar.Pushable as={Segment}>\n    <Sidebar\n      as={Menu}\n      className=\"secondary\"\n      animation=\"overlay\"\n      vertical\n      visible={sidebarVisible}\n      onHide={sidebarToggleHide}\n      width=\"wide\"\n    >\n      <Button\n        onClick={sidebarToggleHide}\n        size=\"big\"\n        icon={{ name: \"close\", size: \"small\" }}\n        className=\"menu-button-close\"\n      />\n      <Menu.Item className=\"ui menu icon labeled\">\n        <Image\n          src=\"https://static.wixstatic.com/media/a4894d_bc50df6799ad42e9aba766682c827da3~mv2.png/v1/fill/w_427,h_427,al_c,q_80,usm_0.66_1.00_0.01/blank.webp\"\n          size=\"small\"\n          centered\n          circular\n        />\n        <RoleButton userRole={userRole} setUserRole={setUserRole} />\n      </Menu.Item>\n      <Divider />\n      {menuItems[userRole].map((element, i) => (\n        <Menu.Item key={i} as={Link} to={element.link}>\n          <Icon name=\"arrow right\" />\n          {element.name}\n        </Menu.Item>\n      ))}\n      <Divider />\n      <Menu.Item as=\"a\">\n        <Icon name=\"vk\" />\n        Группа ВКонтакте\n      </Menu.Item>\n      <Menu.Item as=\"a\">\n        <Icon name=\"youtube\" />\n        Youtube\n      </Menu.Item>\n      <Menu.Item as=\"a\">\n        <Icon name=\"instagram\" />\n        Instagram\n      </Menu.Item>\n      <Divider />\n      <Label as=\"a\" className=\"item\">\n        <Icon name=\"map marker alternate\" />\n        Москва\n      </Label>\n      <Label as=\"a\" className=\"item\">\n        <Flag name=\"russia\" />\n        Русский язык\n      </Label>\n      <Divider />\n      <Menu.Item as=\"a\">\n        <Icon name=\"fork\" />\n        Обратная связь\n      </Menu.Item>\n    </Sidebar>\n\n    <Sidebar.Pusher dimmed={sidebarVisible}>{children}</Sidebar.Pusher>\n  </Sidebar.Pushable>\n);\n\nexport default Pusher;\n","import React from \"react\";\nimport \"./Home.scss\";\n\nconst Home: React.FC<{}> = () => <></>;\n\nexport default Home;\n","import React from \"react\";\nimport \"./Form.scss\";\n\nimport axios from \"axios\";\nimport { Formik, FormikErrors } from \"formik\";\nimport { Form as FormSUI, Header } from \"semantic-ui-react\";\n\ninterface FormValues {\n  country: string;\n  description: string;\n  name: string;\n}\n\nconst Form: React.FC<{}> = () => (\n  <React.Fragment>\n    <Header as=\"h3\">POST | /catalog-admin/vendors | addVendor</Header>\n    <Formik\n      initialValues={{ country: \"\", description: \"\", name: \"\" }}\n      validate={(values: FormValues) => {\n        const errors: FormikErrors<FormValues> = {};\n        if (!values.country) {\n          errors.country = \"Required\";\n        }\n        if (!values.description) {\n          errors.description = \"Required\";\n        }\n        if (!values.name) {\n          errors.name = \"Required\";\n        }\n        return errors;\n      }}\n      onSubmit={(values, { setSubmitting, resetForm }) => {\n        axios\n          .post(\n            `${process.env.REACT_APP_API_URL}/catalog-admin/vendors`,\n            values\n          )\n          .then(function(response) {\n            console.log(response);\n            resetForm();\n          })\n          .catch(function(error) {\n            console.log(error);\n          });\n        setSubmitting(false);\n      }}\n    >\n      {props => {\n        const {\n          dirty,\n          handleBlur,\n          handleChange,\n          handleSubmit,\n          isSubmitting,\n          isValid,\n          errors,\n          touched,\n          values\n        } = props;\n        const hasError: boolean = Object.keys(errors).length !== 0;\n\n        return (\n          // TODO: Implement fields input from JSON\n          <FormSUI onSubmit={handleSubmit} error={hasError}>\n            <FormSUI.Group widths=\"equal\">\n              <FormSUI.Input\n                fluid\n                name=\"name\"\n                value={values[\"name\"]}\n                label=\"Name\"\n                placeholder=\"Roga&Kopyta\"\n                onBlur={handleBlur}\n                onChange={handleChange}\n                error={\n                  touched[\"name\"] &&\n                  errors[\"name\"] && { content: errors[\"name\"] }\n                }\n              />\n              <FormSUI.Input\n                fluid\n                name=\"country\"\n                value={values[\"country\"]}\n                label=\"Country\"\n                placeholder=\"Russia\"\n                onBlur={handleBlur}\n                onChange={handleChange}\n                error={\n                  touched[\"country\"] &&\n                  errors[\"country\"] && { content: errors[\"country\"] }\n                }\n              />\n              <FormSUI.Input\n                fluid\n                name=\"description\"\n                value={values[\"description\"]}\n                label=\"Description\"\n                placeholder=\"other\"\n                onBlur={handleBlur}\n                onChange={handleChange}\n                error={\n                  touched[\"description\"] &&\n                  errors[\"description\"] && { content: errors[\"description\"] }\n                }\n              />\n            </FormSUI.Group>\n            <FormSUI.Button\n              type=\"submit\"\n              className=\"primary\"\n              loading={isSubmitting}\n              disabled={!isValid || !dirty || isSubmitting}\n            >\n              Submit\n            </FormSUI.Button>\n            <pre>{JSON.stringify(props, null, 2)}</pre>\n          </FormSUI>\n        );\n      }}\n    </Formik>\n  </React.Fragment>\n);\n\nexport default Form;\n","import React, { ReactElement, useState } from \"react\";\n\nimport {\n  Button,\n  Icon,\n  Input,\n  Search,\n  SemanticCOLORS,\n  Statistic,\n  Table\n} from \"semantic-ui-react\";\n\nimport \"./CalorieCalculator.scss\";\nimport calorieDB from \"./data.json\";\n\ninterface SelectedItemIntefrace {\n  id: number;\n  title: string;\n  amount: number;\n  protein: number;\n  fat: number;\n  carbohydrate: number;\n  kcal: number;\n  attention?: boolean;\n}\n\nconst initialResultsValue: SelectedItemIntefrace = {\n  id: -1,\n  title: \"\",\n  amount: 0,\n  protein: 0,\n  fat: 0,\n  carbohydrate: 0,\n  kcal: 0\n};\n\nfunction recalculateWithAmount(value: number, amount: number): number {\n  return Math.round(((value * amount) / 100 + Number.EPSILON) * 100) / 100;\n}\n\nexport default function CalorieCalculator(): ReactElement {\n  const [loading, setLoading] = useState<boolean>(false);\n  const [selected, setSelected] = useState<SelectedItemIntefrace>(\n    initialResultsValue\n  );\n  const [results, setResults] = useState<SelectedItemIntefrace[]>([]);\n  const [productList, setProductList] = useState<SelectedItemIntefrace[]>([]);\n\n  function handleSearchChange(\n    e: React.MouseEvent<HTMLElement, MouseEvent>,\n    { value: title }: { value?: string }\n  ): void {\n    setLoading(true);\n    setSelected({ ...initialResultsValue, title: !title ? \"\" : title });\n\n    if (!title) {\n      setResults([]);\n    } else {\n      const results = calorieDB\n        .filter(el =>\n          el.name.toUpperCase().startsWith(title.trim().toUpperCase())\n        )\n        .map(element => ({\n          ...element,\n          title: element.name,\n          amount: 100,\n          description: `100г: Белки ${element.protein}г|Жиры ${element.fat}г|Углеводы ${element.carbohydrate}г|Калории ${element.kcal}г`\n        }));\n\n      setResults(results);\n    }\n    setLoading(false);\n  }\n\n  function handleTableRowDelete(id: number): void {\n    setProductList(\n      productList\n        .filter(el => el.id !== id)\n        .map(el => {\n          return el;\n        })\n    );\n  }\n\n  function handleProductAmountChange(input: string, id: number): void {\n    let value: number = Number.parseFloat(input);\n    value = value ? (value > 0 ? value : 0) : 0;\n    setProductList(\n      productList.map(el => {\n        if (el.id === id) {\n          return { ...el, amount: value };\n        } else {\n          return el;\n        }\n      })\n    );\n  }\n\n  return (\n    <>\n      <Table celled structured>\n        <Table.Header>\n          <Table.Row textAlign=\"center\">\n            <Table.HeaderCell width=\"5\" rowSpan=\"2\">\n              Продукт\n            </Table.HeaderCell>\n            <Table.HeaderCell width=\"2\" rowSpan=\"2\">\n              Количество, г\n            </Table.HeaderCell>\n            <Table.HeaderCell colSpan=\"4\">Состав, г</Table.HeaderCell>\n            <Table.HeaderCell rowSpan=\"2\">...</Table.HeaderCell>\n          </Table.Row>\n          <Table.Row textAlign=\"center\">\n            <Table.HeaderCell width=\"2\">Белки</Table.HeaderCell>\n            <Table.HeaderCell width=\"2\">Жиры</Table.HeaderCell>\n            <Table.HeaderCell width=\"2\">Углеводы</Table.HeaderCell>\n            <Table.HeaderCell width=\"2\">Калории</Table.HeaderCell>\n          </Table.Row>\n        </Table.Header>\n\n        <Table.Body>\n          {productList.map((product: SelectedItemIntefrace) => (\n            <Table.Row key={product.id} positive={product.attention}>\n              <Table.Cell>{product.title}</Table.Cell>\n              <Table.Cell textAlign=\"center\">\n                <Input\n                  size=\"mini\"\n                  value={product.amount}\n                  type=\"number\"\n                  onChange={(e, data) => {\n                    handleProductAmountChange(data.value, product.id);\n                  }}\n                ></Input>\n              </Table.Cell>\n              <Table.Cell textAlign=\"center\">\n                {recalculateWithAmount(product.protein, product.amount)}\n              </Table.Cell>\n              <Table.Cell textAlign=\"center\">\n                {recalculateWithAmount(product.fat, product.amount)}\n              </Table.Cell>\n              <Table.Cell textAlign=\"center\">\n                {recalculateWithAmount(product.carbohydrate, product.amount)}\n              </Table.Cell>\n              <Table.Cell textAlign=\"center\">\n                {recalculateWithAmount(product.kcal, product.amount)}\n              </Table.Cell>\n              <Table.Cell textAlign=\"center\">\n                <Button\n                  circular\n                  size=\"mini\"\n                  icon=\"delete\"\n                  onClick={() => handleTableRowDelete(product.id)}\n                />\n              </Table.Cell>\n            </Table.Row>\n          ))}\n        </Table.Body>\n\n        <Table.Footer>\n          <Table.Row>\n            <Table.HeaderCell colSpan=\"7\">\n              <Search\n                input={{ fluid: true }}\n                icon=\"search\"\n                placeholder=\"Введите продукт...\"\n                fluid\n                loading={loading}\n                value={selected.title}\n                onSearchChange={handleSearchChange}\n                results={results}\n                onResultSelect={(e, { result }) => {\n                  setSelected({ ...result });\n                }}\n              />\n              <Button\n                floated=\"right\"\n                icon\n                labelPosition=\"left\"\n                primary\n                size=\"small\"\n                disabled={selected.id === -1}\n                onClick={() => {\n                  const product = productList.find(e => e.id === selected.id);\n                  if (product) {\n                    product.attention = true;\n                    setTimeout(() => {\n                      product.attention = false;\n                    }, 200);\n                  } else {\n                    setProductList([...productList, selected]);\n                  }\n                  setSelected(initialResultsValue);\n                }}\n              >\n                <Icon name=\"add\" /> Добавить\n              </Button>\n            </Table.HeaderCell>\n          </Table.Row>\n        </Table.Footer>\n      </Table>\n\n      {(() => {\n        if (productList.length !== 0) {\n          const data: {\n            text: string;\n            amount: number;\n            color: SemanticCOLORS;\n          }[] = [\n            { text: \"Грамм\", amount: 0, color: \"grey\" },\n            { text: \"Белков\", amount: 0, color: \"green\" },\n            { text: \"Жиров\", amount: 0, color: \"pink\" },\n            { text: \"Углеводов\", amount: 0, color: \"olive\" },\n            { text: \"Калорий\", amount: 0, color: \"black\" }\n          ];\n\n          productList.forEach(element => {\n            data[0].amount += element.amount;\n            data[1].amount += recalculateWithAmount(\n              element.protein,\n              element.amount\n            );\n            data[2].amount += recalculateWithAmount(\n              element.fat,\n              element.amount\n            );\n            data[3].amount += recalculateWithAmount(\n              element.carbohydrate,\n              element.amount\n            );\n            data[4].amount += recalculateWithAmount(\n              element.kcal,\n              element.amount\n            );\n          });\n\n          return (\n            <Statistic.Group>\n              {data.map((el, i) => (\n                <Statistic key={i} color={el.color}>\n                  <Statistic.Value>\n                    {Math.round((el.amount + Number.EPSILON) * 100) / 100}\n                  </Statistic.Value>\n                  <Statistic.Label>{el.text}</Statistic.Label>\n                </Statistic>\n              ))}\n            </Statistic.Group>\n          );\n        }\n      })()}\n    </>\n  );\n}\n","import Home from \"components/Home\";\nimport Form from \"components/Form\";\nimport CalorieCalculator from \"components/CalorieCalculator\";\n\nexport default [\n  {\n    exact: true,\n    path: \"/\",\n    component: Home\n  },\n  {\n    path: \"/form\",\n    component: Form\n  },\n  {\n    path: \"/calc\",\n    component: CalorieCalculator\n  }\n];\n","import React, { ComponentType } from \"react\";\nimport { Route } from \"react-router-dom\";\n\ninterface Props {\n  component: ComponentType<any>;\n  exact?: boolean;\n  path: string;\n  routes?: { path: string; component: ComponentType<any> }[];\n}\n\nconst RouteWithSubRoutes: React.FC<Props> = ({\n  component: Component,\n  exact,\n  path,\n  routes\n}) => (\n  <Route\n    exact={exact}\n    path={path}\n    render={props => (\n      // pass the sub-routes down to keep nesting\n      <Component {...props} routes={routes} />\n    )}\n  />\n);\n\nexport default RouteWithSubRoutes;\n","import React, { Component } from \"react\";\nimport \"./App.scss\";\n\nimport { BrowserRouter as Router, Switch } from \"react-router-dom\";\nimport { Container } from \"semantic-ui-react\";\n\nimport Header from \"components/Header\";\nimport Pusher from \"components/Pusher\";\nimport routes from \"routes\";\nimport RouteWithSubRoutes from \"helpers/RouteWithSubRoutes\";\n\nexport type userRoles = \"admin\" | \"shop\" | \"user\" | \"none\";\n\ninterface State {\n  sidebarVisible: boolean;\n  userRole: userRoles;\n}\n\nexport default class App extends Component<{}, State> {\n  state: State = { sidebarVisible: false, userRole: \"none\" };\n\n  sidebarToggleShow = () => this.setState({ sidebarVisible: true });\n  sidebarToggleHide = () => this.setState({ sidebarVisible: false });\n\n  setUserRole = (role: userRoles) => {\n    this.setState({ userRole: role });\n  };\n\n  render() {\n    return (\n      <Router basename={process.env.PUBLIC_URL}>\n        <Pusher\n          sidebarVisible={this.state.sidebarVisible}\n          sidebarToggleHide={this.sidebarToggleHide}\n          userRole={this.state.userRole}\n          setUserRole={this.setUserRole}\n        >\n          <Header sidebarToggleShow={this.sidebarToggleShow} />\n          <Container className=\"body-content\">\n            <Switch>\n              {routes.map((route, i) => (\n                <RouteWithSubRoutes key={i} {...route} />\n              ))}\n            </Switch>\n          </Container>\n        </Pusher>\n      </Router>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"semantic-ui-css/semantic.min.css\";\nimport \"./index.scss\";\n\nimport App from \"./App\";\n\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}